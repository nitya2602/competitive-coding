//not very accurate
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
	typedef pair<int, int> iPair;
	void addEdge(vector<iPair> adj[], int u, int v, int wt)
	{
	    adj[u].push_back(make_pair(v, wt));
	    adj[v].push_back(make_pair(u, wt));
	}
    int spanningTree(int V, vector<vector<int>> ad[])
    {
        // code here
        vector<iPair> adj[V+1];
        for(int i = 0; i < V; i++)
        {
            for(int j = 0; j < ad[i].size(); j++)
            {
                if(ad[i][j][0] == 1)
                {
                    addEdge(adj, i, j, ad[i][j][1]);
                }
            }
        }
        priority_queue<iPair, vector<iPair>, greater<iPair>> pq;
        int src = 0;
         vector<int> key(V, INT_MAX);
        vector<int> parent(V, -1);
        vector<bool> inMST(V, false);
        pq.push(make_pair(0, src));
        key[src] = 0;
        int ans = 0;
        while(!pq.empty())
        {
            int u = pq.top().second;
            pq.pop();
            if(inMST[u] == true)
            {
                continue;
            }
            inMST[u] = true;
            ans += key[u];
            for(auto x : adj[u])
            {
                int weight = x.first;
                int v = x.second;
                if(inMST[v] == false && key[v] > weight)
                {
                    key[v] = weight;
                    pq.push(make_pair(key[v], v));
                    parent[v] = u;
                }
            }
        }
        return ans;
    }
};
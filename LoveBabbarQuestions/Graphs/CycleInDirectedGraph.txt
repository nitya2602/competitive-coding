//////////////////////////////////////////////////////////////
//efficient approach
class Solution
{
    public:
	//Function to detect cycle in a directed graph.
	void dfs(vector<int> adj[], vector<bool> &visited, vector<int> &departure, int u, int &time_)
	{
	    visited[u] = true;
	    for(int i = 0; i < adj[u].size(); i++)
	    {
	        if(!visited[adj[u][i]])
	        {
	            dfs(adj, visited, departure, adj[u][i], time_);
	        }
	    }
	    departure[u] = time_++;
	}
	bool isCyclic(int V, vector<int> adj[]) 
	{
	   	// code here
	   	vector<bool> visited(V, false);
	   	vector<int> departure(V);
	   	int time_ = 0;
	   	for(int i = 0; i < V; i++)
	   	{
	   	    if(!visited[i])
	   	    {
	   	        dfs(adj, visited, departure, i, time_);
	   	    }
	   	}
	   	for(int i = 0; i < V; i++)
	   	{
	   	    for(int u : adj[i])
	   	    {
	   	        if(departure[i] <= departure[u])
	   	            return true;
	   	    }
	   	}
	   	return false;
	}
};
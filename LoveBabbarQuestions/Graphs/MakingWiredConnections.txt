class Solution {
public:
    void dfs(vector<vector<int>> &graph, vector<bool> &visited, int u)
    {
        visited[u] = true;
        for(int v : graph[u])
        {
            if(!visited[v])
            {
                dfs(graph, visited, v);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1)
            return -1;
        int isolatedClusters = 0;
        vector<vector<int>> graph(n);
        for(int i = 0; i<  connections.size(); i++)
        {
            graph[connections[i][0]].push_back(connections[i][1]);
            graph[connections[i][1]].push_back(connections[i][0]);
        }
        vector<bool> visited(n, false);
        for(int i = 0; i < n; i++)
        {
            if(!visited[i])
            {
                isolatedClusters++;
                dfs(graph, visited, i);
            }
        }
        return isolatedClusters - 1;
    }
};
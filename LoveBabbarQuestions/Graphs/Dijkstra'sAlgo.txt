//this solution gives time limit exceeded. Check more efficient approach from techie delight

class Solution{   
public:
    int minDist(vector<int> &distance, vector<bool> &set)
    {
        int min;
        for(int i = 1; i < distance.size(); i++)
        {
            if(!set[i])
            {
                min = i;
                break;
            }
        }
        for(int i = 1; i < distance.size(); i++)
        {
            if(!set[i] && distance[i] < distance[min])
                min = i;
        }
        return min;
    }
    int minimumStep(int n){
        //complete the function here
        vector<vector<int>> graph(n+1);
        for(int i = 1; i <= n; i++)
        {
            int m = i + 1;
            int p = 3*i;
            if(m <= n)
            {
                graph[i].push_back(m);
            }
            if(p <= n)
            {
                graph[i].push_back(p);
            }
        }
        vector<int> distance(n+1, INT_MAX);
        vector<bool> set(n+1, false);
        distance[1] = 0;
        for(int i = 1; i <= n; i++)
        {
            int u = minDist(distance, set);
            set[u] = true;
            for(int v : graph[u])
            {
                if(!set[v] && distance[u] != INT_MAX)
                {
                    if(distance[v] == INT_MAX)
                    {
                        distance[v] = distance[u] + 1;
                    }
                    else if(distance[u]+1 < distance[v])
                    {
                        distance[v] = distance[u] + 1;
                    }
                }
            }
        }
        return distance[n];
    }
};
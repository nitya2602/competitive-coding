//O(V + E) implementations

#include <iostream>
#include <vector>
using namespace std;
 
// Data structure to store a graph edge
struct Edge {
    int src, dest;
};
 
// A class to represent a graph object
class Graph
{
public:
    // a vector of vectors to represent an adjacency list
    vector<vector<int>> adjList;
 
    // Graph Constructor
    Graph(vector<Edge> const &edges, int N)
    {
        // resize the vector to hold `N` elements of type `vector<int>`
        adjList.resize(N);
 
        // add edges to the directed graph
        for (auto &edge: edges) {
            adjList[edge.src].push_back(edge.dest);
        }
    }
};
 
// Perform DFS on the graph and set the departure time of all
// vertices of the graph
void DFS(Graph const &graph, int v, vector<bool>
    &discovered, vector<int> &departure, int &time)
{
    // mark the current node as discovered
    discovered[v] = true;
 
    // set the arrival time of vertex `v`
    time++;
 
    // do for every edge `v â€”> u`
    for (int u: graph.adjList[v])
    {
        // if `u` is not yet discovered
        if (!discovered[u]) {
            DFS(graph, u, discovered, departure, time);
        }
    }
 
    // ready to backtrack
    // set departure time of vertex `v`
    departure[time] = v;
    time++;
}
 
// Function to perform a topological sort on a given DAG
void doTopologicalSort(Graph const &graph, int N)
{
    // `departure[]` stores the vertex number using departure time as an index
    vector<int> departure(2*N, -1);
 
    /* If we had done it the other way around, i.e., fill the array
       with departure time using vertex number as an index, we would
       need to sort it later */
 
    // to keep track of whether a vertex is discovered or not
    vector<bool> discovered(N);
    int time = 0;
 
    // perform DFS on all undiscovered vertices
    for (int i = 0; i < N; i++)
    {
        if (!discovered[i]) {
            DFS(graph, i, discovered, departure, time);
        }
    }
 
    // Print the vertices in order of their decreasing
    // departure time in DFS, i.e., in topological order
    for (int i = 2*N - 1; i >= 0; i--)
    {
        if (departure[i] != -1) {
            cout << departure[i] << " ";
        }
    }
}
 
int main()
{
    // vector of graph edges as per the above diagram
    vector<Edge> edges =
    {
        {0, 6}, {1, 2}, {1, 4}, {1, 6}, {3, 0}, {3, 4},
        {5, 1}, {7, 0}, {7, 1}
    };
 
    // total number of nodes in the graph
    int N = 8;
 
    // build a graph from the given edges
    Graph graph(edges, N);
 
    // perform topological sort
    doTopologicalSort(graph, N);
 
    return 0;
}

//////////////////////////////////////////////////////////////////////
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void dfs(vector<int> adj[], vector<bool> visited, int u, stack<int> &stack)
	{
	    visited[u] = true;
	    for(int i = 0; i < adj[u].size(); i++)
	    {
	        if(!visited[adj[u][i]])
	        {
	            dfs(adj, visited, adj[u][i], stack);
	        }
	    }
	    stack.push(u);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<bool> visited(V, false);
	    stack<int> stack;
	    for(int i = 0; i < V; i++)
	    {
	        if(!visited[i])
	        {
	            dfs(adj, visited, i, stack);
	        }
	    }
	    vector<int> ans;
	    while(!stack.empty())
	    {
	        ans.push_back(stack.top());
	        stack.pop();
	    }
	    return ans;
	}
};

class Solution
{
    public:
    //Function to find the number of islands.
    int row[8] = {0, 1, 0, -1, -1, 1, 1, -1};
    int col[8] = {1, 0, -1, 0, 1, 1, -1, -1};
    bool isSafe(vector<vector<char>> &graph, int r, int c)
    {
        if(r < 0 || c < 0 || r >= graph.size() || c >= graph[0].size() || graph[r][c] == '0')
            return false;
        return true;
    }
    void dfs(vector<vector<char>> &graph, int r, int c)
    {
        if(isSafe(graph, r, c))
        {
            graph[r][c] = '0';
            for(int k = 0; k < 8; k++)
            {
                dfs(graph, r+row[k], c+col[k]);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) 
    {
        // Code here
        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == '1')
                {
                    grid[i][j] = '0';
                    count++;
                    for(int k = 0; k < 8; k++)
                    {
                        dfs(grid, i+row[k], j+col[k]);
                    }
                }
            }
        }
        return count;
    }
};
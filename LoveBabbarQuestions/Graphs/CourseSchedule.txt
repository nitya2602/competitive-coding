//leetcode problem 207

class Solution {
public:
    void dfs(vector<vector<int>> &graph, vector<bool> &visited, vector<int> &distance, int u, int &time)
    {
        visited[u] = true;
        for(int v : graph[u])
        {
            if(!visited[v])
            {
                dfs(graph, visited, distance, v, time);
            }
        }
        distance[u] = time++;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);
        for(int i = 0; i < prerequisites.size(); i++)
        {
            graph[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        vector<bool> visited(numCourses, false);
        vector<int> distance(numCourses);
        int time = 0;
        for(int i = 0; i < numCourses; i++)
        {
            if(!visited[i])
            {
                dfs(graph, visited, distance, i, time);
            }
        }
        for(int i = 0; i < numCourses; i++)
        {
            for(int u : graph[i])
            {
                //should be less than equal to
                //for self loops
                if(distance[i] <= distance[u])
                    return false;
            }
        }
        return true;
    }
};
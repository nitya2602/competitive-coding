/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/


class Solution {
public:
    Node* cloneGraph(Node* node) {
        //clone a graph
        if(node == NULL) return NULL;
        Node* start = new Node(node -> val);
        unordered_map<Node*, Node*> map;
        map[node] = start;
        queue<Node*> q;
        q.push(node);
        while(!q.empty())
        {
            Node* u = q.front();
            q.pop();
            for(int i = 0; i < u->neighbors.size(); i++)
            {
                if(map[u->neighbors[i]] == NULL)
                {
                    Node* temp = new Node(u->neighbors[i]->val);
                    map[u->neighbors[i]] = temp;
                    q.push(u->neighbors[i]);
                }
                map[u] -> neighbors.push_back(map[u->neighbors[i]]);
            }
        }
        return map[node];
    }
};
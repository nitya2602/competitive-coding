//O(n^2) solution

class Solution{
  public:
    int minJumps(int arr[], int n){
        // Your code here
        vector<int> jumps(n, INT_MAX);
        jumps[0] = 0;
        if(arr[0] == 0) return -1;
        for(int i = 0; i < n-1; i++)
        {
            if(jumps[i] == INT_MAX) return -1;
            int j;
            for(j = 0; j <= arr[i]; j++)
            {
                if(i+j < n)
                {
                    jumps[i+j] = min(jumps[i+j], jumps[i]+1);
                }
            }
        }
        if(jumps[n-1] == INT_MAX) return -1;
        return jumps[n-1];
    }
};

//////////////////////////////////////////////////////////////
O(n) solution

class Solution{
  public:
    int minJumps(int a[], int n){
        // Your code here
       int maxR = a[0];
       int step = a[0];
       int jump = 1;
       if(n == 1) return 0;
       else if(a[0] == 0) return -1;
       else
       {
           for(int i = 1; i < n; i++)
           {
                if(i == n-1)
                    return jump;
                maxR = max(maxR, a[i]+i);
                step--;
                if(step == 0)
                {
                    jump++;
                    if(i >= maxR)
                        return -1;
                    step = maxR-i;
                }
           }
       }
       return jump;
    }
};
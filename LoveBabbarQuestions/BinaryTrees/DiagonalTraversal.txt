//recursive approach
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
void preorder(TreeNode* root, map<int, vector<int>> &map, int level)
{
    if(root == NULL)
        return;
    map[level].push_back(root -> val);
    preorder(root -> left, map, level+1);
    preorder(root -> right, map, level);
}
vector<int> Solution::solve(TreeNode* A) {
    map<int, vector<int>> map;
    preorder(A, map, 0);
    vector<int> ans;
    for(auto i : map)
    {
        for(auto j : i.second)
        {
            ans.push_back(j);
        }
    }
    return ans;
}

////////////////////////////////////////////////////////////////////////
//using queue
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::solve(TreeNode* A) {
   queue<TreeNode*> q;
   vector<int> ans;
   TreeNode* sentinel = new TreeNode(-1);
   while(A)
   {
       q.push(A);
       A = A -> right;
   }
   q.push(sentinel);
   while(q.size() != 1)
   {
       TreeNode* node = q.front();
       q.pop();
       if(node != sentinel)
       {
           ans.push_back(node -> val);
           TreeNode* root = node -> left;
           while(root)
           {
               q.push(root);
               root = root -> right;
           }
       }
       else
       {
           q.push(sentinel);
       }
   }
   return ans;
}

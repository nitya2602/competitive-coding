//recursive implementation
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void postorder(TreeNode* root, vector<int> &ans)
    {
        if(root == NULL) return;
        postorder(root -> left, ans);
        postorder(root -> right, ans);
        ans.push_back(root -> val);
    }
    
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        postorder(root, ans);
        return ans;
    }
};

/////////////////////////////////////////////////////////////////////////
//iterative implementation
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::postorderTraversal(TreeNode* A) {
    vector<int> ans;
    stack<TreeNode*> s1, s2;
    s1.push(A);
    while(!s1.empty())
    {
        TreeNode* node = s1.top();
        s1.pop();
        s2.push(node);
        if(node -> left)
            s1.push(node -> left);
        if(node -> right)
            s1.push(node -> right);
    }
    while(!s2.empty())
    {
        ans.push_back(s2.top() -> val);
        s2.pop();
    }
    return ans;
}

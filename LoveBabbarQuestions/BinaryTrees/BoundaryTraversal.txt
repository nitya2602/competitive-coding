//don't do left view + right view + bottom view as trees can have 
//many nodes in common in left and right views

//recursive implementation

class Solution {
public:
    void leftBoundary(Node* root, vector<int> &ans)
    {
        if(root == NULL) return;
        if(root -> left)
        {
            ans.push_back(root -> data);
            leftBoundary(root -> left, ans);
        }
        else if(root -> right)
        {
            ans.push_back(root -> data);
            leftBoundary(root -> right, ans);
        }
    }
    void bottomLeft(Node* root, vector<int> &ans)
    {
        if(root == NULL) return;
        bottomLeft(root -> left, ans);
        bottomLeft(root -> right, ans);
        if(!root -> left && !root -> right)
        {
            ans.push_back(root -> data);
        }
    }
    void bottomRight(Node* root, vector<int> &ans)
    {
        if(root == NULL) return;
        bottomRight(root -> left, ans);
        bottomRight(root -> right, ans);
        if(!root -> left && !root -> right)
        {
            ans.push_back(root -> data);
        }
    }
    void rightBoundary(Node* root, vector<int> &ans)
    {
        if(root == NULL) return;
        if(root -> right)
        {
            rightBoundary(root -> right, ans);
            ans.push_back(root -> data);
        }
        else if(root -> left)
        {
            rightBoundary(root -> left, ans);
            ans.push_back(root -> data);
        }
    }
    vector <int> printBoundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root == NULL) return ans;
        ans.push_back(root -> data);
        leftBoundary(root -> left, ans);
        bottomLeft(root -> left, ans);
        bottomRight(root -> right, ans);
        rightBoundary(root -> right, ans);
        return ans;
    }
};

///////////////////////////////////////////////////////////////
//iterative implementation
//O(nlog(right-left))
int count(int mat[MAX][MAX], int n, int mid)
{
    int count = 0;
    if(mid < mat[0][0])
    {
        return 0;
    }
    else if(mid == mat[0][0])
    {
        return 1;
    }
    else if(mid >= mat[n-1][n-1])
    {
        return n*n;
    }
    else
    {
        int row = 0;
        int col = n - 1;
        while(row < n && col >= 0)
        {
            if(mat[row][col] <= mid)
            {
                count += col + 1;
                row++;
            }
            else
            {
                col--;
            }
        }
    }
    return count;
}

int kthSmallest(int mat[MAX][MAX], int n, int k)
{
  //Your code here
  int left = mat[0][0];
  int right = mat[n-1][n-1];
  while(left < right)
  {
      int mid = left + (right - left)/2;
      if(count(mat, n, mid) < k)
      {
          left = mid + 1;
      }
      else
      {
	  //so that we don't output an element that is not a
          //part of the matrix
          right = mid;
      }
  }
  return left;
}